// Import Workbox libraries using importScripts
importScripts('https://storage.googleapis.com/workbox-cdn/releases/7.0.0/workbox-sw.js');

// Initialize Workbox
if (workbox) {
  console.log('Workbox is loaded');

  // Clean up outdated caches
  workbox.precaching.cleanupOutdatedCaches();

  // Precache all assets generated by Vite
  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);

  // Cache the Google Fonts stylesheets with a stale-while-revalidate strategy
  workbox.routing.registerRoute(
    ({ url }) => url.origin === 'https://fonts.googleapis.com',
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'google-fonts-stylesheets',
    })
  );

  // Cache the underlying font files with a cache-first strategy for 1 year
  workbox.routing.registerRoute(
    ({ url }) => url.origin === 'https://fonts.gstatic.com',
    new workbox.strategies.CacheFirst({
      cacheName: 'google-fonts-webfonts',
      plugins: [
        {
          cacheKeyWillBeUsed: async ({ request }) => `${request.url}?v=1`,
        },
      ],
    })
  );

  // Cache API responses with network-first strategy
  workbox.routing.registerRoute(
    ({ url }) => url.pathname.startsWith('/api/'),
    new workbox.strategies.NetworkFirst({
      cacheName: 'api-cache',
      networkTimeoutSeconds: 10,
      plugins: [
        {
          cacheWillUpdate: async ({ response }) => {
            return response.status === 200 ? response : null;
          },
        },
      ],
    })
  );

  // Cache images with cache-first strategy
  workbox.routing.registerRoute(
    ({ request }) => request.destination === 'image',
    new workbox.strategies.CacheFirst({
      cacheName: 'images',
      plugins: [
        {
          cacheKeyWillBeUsed: async ({ request }) => request.url,
        },
      ],
    })
  );
} else {
  console.log('Workbox could not be loaded. No offline support');
}

// Handle background sync for offline transactions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync-transactions') {
    event.waitUntil(syncTransactions());
  }
});

// Handle push notifications
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/icons/icon-192x192.png',
      badge: '/icons/badge-72x72.png',
      vibrate: [100, 50, 100],
      data: data.data,
      actions: data.actions,
    };

    event.waitUntil(self.registration.showNotification(data.title, options));
  }
});

async function syncTransactions() {
  console.log('Syncing pending transactions...');
}
